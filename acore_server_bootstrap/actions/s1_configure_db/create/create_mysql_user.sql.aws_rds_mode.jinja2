/*
这段代码是 create_mysql.sql.aws_rds_mode.jinja2 的逻辑子集, 不管创建数据库, 只管创建 User
并给予权限. 该段代码只适用于配置一台曾经已经连接过数据库的 EC2, 进行例如更新密码等操作, 而不需重新
创建数据库.

注意这里不是 @'localhost' 了, 而我们是用的 @'%.%.%.%'. 这个设计本身是用来防止密码泄露之后
从别的机器上访问数据库. 而因为我们使用的是 EC2 + RDS, 两者必须都有同一个特定的 security group
才能由 EC2 访问 RDS. 不同环境下的 (blue / green) 的 EC2 和 RDS 是无法互相访问的. 由于
security group 的防火墙机制发生在先, 而 DB User 的验证机制发生在后, 所以这里就没有必要设置
复杂的安全策略了. 并且由于 EC2 的 IP 地址会变动, 而且 VPC 的 CIDR block 也可能会改变,
所以为了方便起见就直接设为允许任意 IP 地址访问了.
*/

/*
先删除可能已经存在的同名 User, 这样是为了防止在重复执行这段 SQL 时出错, 以达到幂等性的目的
*/
DROP USER IF EXISTS '{{ database_username }}'@'%.%.%.%';

/*
注意这里 'your_password' 是 acore 用户的密码. 不用默认密码而用你自己的密码有助于增加数据库安全性.
但你要知道如果黑客能成功的黑进你的 EC2, 就意味着能看到 authserver.conf 文件, 里面可是明文记录了
你的密码的. 所以你还需要保证 EC2 的安全. 当然在 Key Pair + Security Group 的双重保护下一般是
没问题的, 除非你自己泄露了 Key Pair, 又不小心让黑客黑进了你的白名单网络.
*/
CREATE USER '{{ database_username }}'@'%.%.%.%' IDENTIFIED BY '{{ database_password }}' WITH MAX_QUERIES_PER_HOUR 0 MAX_CONNECTIONS_PER_HOUR 0 MAX_UPDATES_PER_HOUR 0;

/*
RDS 不允许用 ALL PRIVILEGES, 下面是我们需要给 user 的权限
*/
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, PROCESS, REFERENCES, INDEX, ALTER, SHOW DATABASES, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER ON * . * TO '{{ database_username }}'@'%.%.%.%' WITH GRANT OPTION;

/*
注意, 这里没有创建三个空数据库的步骤.
*/

/*
RDS 不允许用 ALL PRIVILEGES, 而且这一步是将对特定数据库的权限给 user, 所以这些权限要比前面的全局权限小.
*/
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER ON `acore_world` . * TO '{{ database_username }}'@'%.%.%.%' WITH GRANT OPTION;
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER ON `acore_characters` . * TO '{{ database_username }}'@'%.%.%.%' WITH GRANT OPTION;
GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER ON `acore_auth` . * TO '{{ database_username }}'@'%.%.%.%' WITH GRANT OPTION;
